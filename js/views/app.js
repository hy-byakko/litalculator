// Generated by CoffeeScript 1.6.3
define(['jquery', 'underscore', 'backbone', 'models/record', 'models/recordcontainer', 'collections/records', 'collections/recordcontainers', 'views/record', 'common'], function($, _, Backbone, Record, RecordContainer, Records, RecordContainers, RecordView, Common) {
  'use strict';
  return Backbone.View.extend({
    el: '#app',
    events: {
      'click #add-record': 'addRecord'
    },
    initialize: function() {
      var calculateWarp;
      this.$recordsView = this.$('#records');
      this.$recordsBody = this.$recordsView.find('tbody');
      this.$resultBody = this.$('#result ul.list-group');
      this.recordContainers = new RecordContainers;
      this.records = new Records;
      calculateWarp = _.debounce(this.calculateRender, 5, false);
      this.recordContainers.fetch();
      this.listenTo(this.records, 'add', this.renderOne);
      this.listenTo(this.records, 'all', calculateWarp);
      this.listenTo(this.records, 'reset', this.render);
      this.listenTo(this.records, 'write', this.recordsUpdate);
      this.listenTo(this.recordContainers, 'sync', this.recordsFetch);
      return Common.targetDate.$el.trigger('change');
    },
    recordsFetch: function() {
      return this.records.reset(JSON.parse(this.recordContainers.getContainer().get('content')));
    },
    recordsUpdate: function() {
      return this.recordContainers.getContainer().set('content', JSON.stringify(this.records.toJSON())).set('lastModifyTime', (new Date).toString()).save();
    },
    render: function() {
      var _this = this;
      this.$recordsBody.empty();
      this.records.chain().filter(function(record) {
        return record.isActived();
      }).each(function(record) {
        return _this.renderOne(record);
      }).value();
      return this;
    },
    getCategorySelect: function() {
      if (this.$categorySelect) {
        return this.$categorySelect;
      }
      return this.$categorySelect = $(this.selectBuilder({
        data: Common.getCategories()
      }));
    },
    getWorkerSelect: function() {
      if (this.$workerSelect) {
        return this.$workerSelect;
      }
      return this.$workerSelect = $(this.selectBuilder({
        data: Common.getWorkers()
      }));
    },
    resultTemplate: _.template('\
<% _.each(result, function(worker) { %>\
<li class="list-group-item">\
    <h4 class="list-group-item-heading"><%= worker.name %> ( <% _.each(worker.counts, function(count) { %><%= count.name %>: <%= count.num %> <% }); %> ) </h4>\
    <% _.each(worker.sub, function(category) { %>\
    <p class="list-group-item-text"><%= category.name %> ( <% _.each(category.sub, function(detail) { %><%= detail.name %>: <%= detail.num %> <% }); %> ) </p>\
    <% }); %>\
</li>\
<% }); %>', void 0, {
      variable: 'result'
    }),
    calculateRender: function() {
      return this.$resultBody.html($(this.resultTemplate(this.calculate())));
    },
    calculate: function() {
      var groupedRecords, records;
      records = this.records.filter(function(record) {
        return record.isValid() && record.isActived();
      });
      groupedRecords = _.groupBy(records, function(record) {
        return record.get('worker');
      });
      if (records.length > 0) {
        groupedRecords["总计"] = records;
      }
      return _.chain(groupedRecords).map(function(records, worker) {
        return _.object(['name', 'sub', 'counts'], [
          _.isNaN(parseInt(worker)) ? worker : Common.getWorker(parseInt(worker)).text, _.chain(records).groupBy(function(record) {
            return record.get('category');
          }).map(function(records, category) {
            return _.object(['name', 'sub'], [
              Common.getCategory(parseInt(category)).text, _.chain(records).groupBy(function(record) {
                return record.get('detail');
              }).map(function(records, detail) {
                return _.object(['name', 'num'], [
                  Common.getDetail(parseInt(category), parseInt(detail)).text, _.reduce(records, function(memo, record) {
                    return memo + record.getNum();
                  }, 0)
                ]);
              }).value()
            ]);
          }).value(), []
        ]);
      }).map(function(worker) {
        _.reduce(worker.sub, function(counts, category) {
          counts.push(_.object(['name', 'num'], [
            category.name, _.reduce(category.sub, function(count, detail) {
              return count + detail.num;
            }, 0)
          ]));
          return counts;
        }, worker.counts);
        return worker;
      }).value();
    },
    addRecord: function() {
      return this.records.add(new Record);
    },
    renderOne: function(instance) {
      var recordView;
      recordView = new RecordView({
        model: instance,
        parent: this
      });
      return this.$recordsBody.append(recordView.render().el);
    },
    selectTemplate: _.template("<select class='form-control fit-table'>	<% _.each(options.data, function(item) { %>	<option value=<%= item.value %>><%= item.text %></option>	<% }); %></select>", void 0, {
      variable: 'options'
    }),
    selectBuilder: function(options) {
      if (options == null) {
        options = {};
      }
      return this.selectTemplate(options);
    },
    detailSelectBuilder: function(categoryValue) {
      var details;
      details = Common.getDetails(categoryValue);
      if (details) {
        return $(this.selectBuilder({
          data: details
        }));
      } else {
        return void 0;
      }
    },
    numberTemplate: _.template('\
<input type="text" class="form-control fit-table strict-width" autocomplete="off">\
', void 0, {
      variable: 'options'
    }),
    numberBuilder: function(options) {
      if (options == null) {
        options = {};
      }
      return $(this.numberTemplate(options));
    }
  });
});
