// Generated by CoffeeScript 1.6.3
define(['jquery', 'underscore', 'backbone', 'models/recordcontainer', 'collections/records', 'common', 'dropboxprovider', 'eventmgr', 'moment', 'backbone.indexedDB'], function($, _, Backbone, RecordContainer, Records, Common, DropboxProvider, eventManager, moment) {
  'use strict';
  return Backbone.Collection.extend({
    model: RecordContainer,
    store: new Backbone.IndexedDB.Store('recordContainers'),
    initialize: function() {
      var _this = this;
      this.records = new Records;
      this.listenTo(this.records, 'write', this.recordsUpdate);
      this.listenTo(eventManager, 'change', function() {
        return DropboxProvider.datastoreManager.openDefaultDatastore(function(error, datastore) {
          var localCntr, remoteCntr;
          _this.remoteStore = datastore.getTable('recordContainers');
          _this.recordsFetch();
          localCntr = _this.getContainer();
          remoteCntr = _this.remoteStore.getOrInsert(localCntr.id.toString(), localCntr.toRemoteFormat());
          if (!(remoteCntr.has('lastModifyTime') && !moment(remoteCntr.get('lastModifyTime')).isBefore(localCntr.get('lastModifyTime')))) {
            remoteCntr.update(localCntr.toRemoteFormat());
            return localCntr.set('lastSyncTime', new Date);
          }
        });
      });
      return this;
    },
    getContainer: function() {
      var container;
      container = this.find(function(container) {
        return moment(container.get('contentTime')).isSame(Common.targetDate.date);
      });
      if (container) {
        return container;
      }
      container = new RecordContainer;
      container.set('contentTime', Common.targetDate.date);
      this.add(container);
      container.save();
      return container;
    },
    recordsUpdate: function() {
      var container;
      container = this.getContainer();
      container.set('content', this.records.toJSON());
      container.set('lastModifyTime', new Date);
      return container.save();
    },
    recordsFetch: function() {
      return this.records.reset(this.getContainer().get('content'));
    }
  });
});
