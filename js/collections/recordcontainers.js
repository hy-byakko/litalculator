// Generated by CoffeeScript 1.6.3
define(['jquery', 'underscore', 'backbone', 'models/recordcontainer', 'collections/records', 'common', 'dropboxprovider', 'eventmgr', 'moment', 'backbone.indexedDB'], function($, _, Backbone, RecordContainer, Records, Common, DropboxProvider, eventManager, moment) {
  'use strict';
  return Backbone.Collection.extend({
    model: RecordContainer,
    store: new Backbone.IndexedDB.Store('recordContainers'),
    initialize: function() {
      var _this = this;
      this.records = new Records;
      this.listenTo(this.records, 'write', this.recordsUpdate);
      this.listenTo(eventManager, 'change', function() {
        _this.recordsFetch();
        return DropboxProvider.getStore().done(function(store) {
          var remoteCntrs;
          remoteCntrs = store.getTable('recordContainers');
          return _this.getContainer('remote').done(function(localCntr) {
            var remoteCntr;
            remoteCntr = remoteCntrs.query({
              contentTime: localCntr.get('contentTime')
            })[0];
            if (!remoteCntr) {
              return remoteCntrs.insert(localCntr.toRemoteFormat());
            } else if (!moment(remoteCntr.get('createTime')).isSame(localCntr.get('createTime')) || moment(remoteCntr.get('lastModifyTime')).isAfter(localCntr.get('lastModifyTime'))) {
              localCntr.fetchRemote(remoteCntr.getFields());
              return _this.recordsFetch();
            } else if (moment(remoteCntr.get('lastModifyTime')).isBefore(localCntr.get('lastModifyTime'))) {
              return remoteCntr.update(localCntr.toRemoteFormat());
            }
          });
        });
      });
      return this;
    },
    getContainer: function() {
      var container, defer;
      defer = $.Deferred();
      container = this.find(function(container) {
        return moment(container.get('contentTime')).isSame(Common.targetDate.date);
      });
      if (container) {
        if (container.id) {
          defer.resolve(container);
        } else {
          this.listenToOnce(container, 'sync', function() {
            return defer.resolve(container);
          });
        }
      } else {
        container = new RecordContainer;
        container.set('contentTime', Common.targetDate.date);
        this.add(container);
        container.save().done(function() {
          return defer.resolve(container);
        });
      }
      return defer.promise();
    },
    recordsUpdate: function() {
      var _this = this;
      return this.getContainer('update').done(function(container) {
        container.set('content', _this.records.toJSON());
        container.set('lastModifyTime', new Date);
        return container.save();
      });
    },
    recordsFetch: function() {
      var _this = this;
      return this.getContainer('fetch').done(function(container) {
        return _this.records.reset(container.get('content'));
      });
    }
  });
});
