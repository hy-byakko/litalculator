// Generated by CoffeeScript 1.6.3
define(['jquery', 'underscore', 'backbone', 'models/recordcontainer', 'collections/records', 'common', 'eventmgr', 'backbone.indexedDB'], function($, _, Backbone, RecordContainer, Records, Common, eventManager, moment) {
  'use strict';
  return Backbone.Collection.extend({
    model: RecordContainer,
    store: new Backbone.IndexedDB.Store('recordContainers'),
    remoteSync: function() {
      var _this = this;
      return this.getLocal().done(function(localRec) {
        return localRec.remoteSync().done(function(rec, evt) {
          if (evt.type === 'localupdate') {
            return _this.recordsFetch();
          }
        });
      });
    },
    getLocal: function() {
      return this.getOrCreate({
        contentTime: Common.targetDate.date
      });
    },
    initialize: function() {
      var _this = this;
      this.records = new Records;
      this.listenTo(this.records, 'write', this.recordsUpdate);
      this.listenTo(eventManager, 'change', function() {
        _this.recordsFetch();
        return _this.remoteSync();
      });
      return this;
    },
    recordsUpdate: function() {
      var _this = this;
      return this.getLocal().done(function(container) {
        container.set('content', _this.records.toJSON());
        container.set('modifyTime', new Date);
        return container.save().done(function() {
          return container.remoteSync();
        });
      });
    },
    recordsFetch: function() {
      var _this = this;
      return this.getLocal().done(function(container) {
        return _this.records.reset(container.get('content'));
      });
    }
  });
});
