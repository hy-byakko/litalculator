// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['underscore', 'backbone', 'moment', 'eventmgr', 'models/meta', 'jQuery.indexedDB'], function(_, Backbone, moment, eventManager, Meta) {
  'use strict';
  var Common, common, selectExpend, targetDate;
  selectExpend = function(element) {
    var event;
    event = document.createEvent('MouseEvents');
    event.initMouseEvent('mousedown', true, true, window);
    return element.dispatchEvent(event);
  };
  Backbone.IndexedDB.DBName = 'litalculator';
  targetDate = {
    $el: $('#target-date').on('change', function() {
      if (!targetDate.$el.val()) {
        return;
      }
      targetDate.date = moment(targetDate.$el.val()).toDate();
      return eventManager.trigger('change', targetDate.date);
    }).val(moment().format("YYYY-MM-DD"))
  };
  eventManager.on('appready', function() {
    return targetDate.$el.trigger('change');
  });
  common = new (Common = (function() {
    function Common() {
      this.getWorker = __bind(this.getWorker, this);
      this.getWorkers = __bind(this.getWorkers, this);
      this.getDetail = __bind(this.getDetail, this);
      this.getDetails = __bind(this.getDetails, this);
      this.getCategory = __bind(this.getCategory, this);
      this.getCategories = __bind(this.getCategories, this);
      var meta,
        _this = this;
      meta = new Meta;
      meta.init().done(function() {
        _this.metaData = meta.get('data');
        return eventManager.trigger('metaready');
      });
    }

    Common.prototype.getCategories = function() {
      return this.metaData.categories;
    };

    Common.prototype.getCategory = function(value) {
      return _.findWhere(this.metaData.categories, {
        value: value
      });
    };

    Common.prototype.getDetails = function(categoryValue) {
      return (this.getCategory(categoryValue) || {}).details;
    };

    Common.prototype.getDetail = function(categoryValue, detailValue) {
      var details;
      details = this.getDetails(categoryValue);
      if (!details) {
        return;
      }
      return _.findWhere(details, {
        value: detailValue
      });
    };

    Common.prototype.getWorkers = function() {
      return this.metaData.workers;
    };

    Common.prototype.getWorker = function(value) {
      return _.findWhere(this.metaData.workers, {
        value: value
      });
    };

    Common.prototype.targetDate = targetDate;

    Common.prototype.selectExpend = selectExpend;

    Common.prototype.onLineState = navigator.onLine;

    return Common;

  })());
  eventManager.on('online', function() {
    return common.onLineState = 'online';
  });
  eventManager.on('offline', function() {
    return common.onLineState = 'offline';
  });
  return common;
});
